openapi: 3.0.0
info:
  title: 10Web API
  description: |    
    The 10Web API provides a comprehensive set of endpoints for managing websites, DNS zones, domains, SSL certificates, backups, and more. This RESTful API allows you to integrate 10Web's powerful hosting and website management capabilities into your own applications.
    
tags:
  - name: Account
    description: Operations for managing account-level resources
  - name: Website
    description: Operations for website creation and management
  - name: AI
    description: Operations for AI-powered features
  - name: Domain
    description: Operations for domain management
  - name: Zone
    description: Operations for DNS zone management
  - name: Backup
    description: Operations for backup management
  - name: Certificate
    description: Operations for SSL certificate management
  - name: WP Autologin
    description: Operations for secure WordPress admin panel autologin functionality
  - name: Cache
    description: Operations for cache management
  - name: PHP Management
    description: Operations for PHP version management
  - name: Subdomain
    description: Operations for subdomain management
  - name: Webhooks
    description: |
      The 10Web platform supports webhooks to notify your applications about events that occur in the background.
      
      ### Webhook Structure
      
      All webhooks have the following base structure:
      
      | Field | Type | Description |
      |-------|------|-------------|
      | `event` | string | The type of event that triggered the webhook |
      | `status` | string | Status of the operation (`success` or `failed`) |
      | Additional fields | various | Event-specific fields as described below |
      
      ### Supported Webhook Events
      
      #### Staging Environment Operations
      
      **staging_environment_enabled**
      
      Sent when a staging environment is enabled for a domain.
      
      | Field | Type | Description |
      |-------|------|-------------|
      | `domain_id` | integer | The ID of the main domain |
      | `site_url` | string | The URL of the main site |
      | `staging_domain_id` | integer | The ID of the staging domain |
      | `staging_url` | string | The URL of the staging site |
      
      **staging_environment_disabled**
      
      Sent when a staging environment is disabled.
      
      | Field | Type | Description |
      |-------|------|-------------|
      | `domain_id` | integer | The ID of the main domain |
      | `site_url` | string | The URL of the main site |
      | `staging_domain_id` | integer | The ID of the staging domain |
      
      #### Environment Sync Operations
      
      **environment_synced**
      
      Sent when content is synced between live and staging environments.
      
      | Field | Type | Description |
      |-------|------|-------------|
      | `from_domain_id` | integer | The ID of the source domain |
      | `to_domain_id` | integer | The ID of the destination domain |
      | `from_domain_name` | string | The URL of the source domain |
      | `to_domain_name` | string | The URL of the destination domain |
      | `sync_type` | string | The direction of the sync (`to_live` or `to_staging`) |
      
      #### Backup Operations
      
      **backup_created**
      
      Sent when a new backup is created.
      
      | Field | Type | Description |
      |-------|------|-------------|
      | `domain_id` | integer | The ID of the domain for which the backup was created |
      
      **backup_restored**
      
      Sent when a backup is restored.
      
      | Field | Type | Description |
      |-------|------|-------------|
      | `domain_id` | integer | The ID of the domain for which the backup was restored |
      | `backup_time` | string | The timestamp of the backup (format YYYYMMDDTHHmmssZ) |

servers:
  - url: https://api.10web.io

paths:
  /account/domains:
    get:
      summary: Get all domains for the account
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: List of domains for the account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDomainsResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /account/domains/{domain_id}/delete:
    delete:
      summary: Delete a domain from the account
      tags:
        - Account
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Domain deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/website:
    post:
      summary: Create a website
      tags:
        - Website
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebsiteRequest'
      responses:
        '200':
          description: Website created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebsiteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ai/generate_site:
    post:
      summary: Generate an AI-powered website
      tags:
        - AI
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - domain_id
                - business_type
                - business_name
                - business_description
              properties:
                domain_id:
                  type: integer
                  description: The ID of the domain to generate the site for
                business_type:
                  type: string
                  description: Type of business
                  example: "agency"
                business_name:
                  type: string
                  description: Name of the business
                  example: "My Agency"
                business_description:
                  type: string
                  description: Short description of the business
                  example: "Digital marketing solutions"
      responses:
        '200':
          description: Website generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    description: Status message
                  status:
                    type: integer
                    description: HTTP status code
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        description: URL of the generated website
                example:
                  msg: "Success"
                  status: 200
                  data:
                    url: "https://subdomain.domain.com"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ai/generate_site_from_sitemap:
    post:
      summary: Generate a website using a previously created outline, styles, and secondary pages
      tags:
        - AI
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - domain_id
                - unique_id
                - params
              properties:
                domain_id:
                  type: integer
                  description: The ID of the domain to generate the site for
                  example: 18925
                unique_id:
                  type: string
                  description: The unique identifier of the previously generated sitemap
                  example: "ai2_unique_F405Pjih23f88mALR9DxPb1TQ0bld6g8M3uJ_JCH"
                params:
                  type: object
                  required:
                    - business_type
                    - business_name
                    - business_description
                    - pages_meta
                    - website_description
                    - website_keyphrase
                    - website_title
                  properties:
                    business_type:
                      type: string
                      description: Type of business
                      example: "agency"
                    business_name:
                      type: string
                      description: Name of the business
                      example: "My Restaurant"
                    business_description:
                      type: string
                      description: Short description of the business
                      example: "Best restaurant in my city"
                    colors:
                      type: object
                      description: Website color scheme
                      required:
                        - background_dark
                        - primary_color
                        - secondary_color
                      properties:
                        background_dark:
                          type: string
                          description: Color code for dark backgrounds
                          example: "#212121"
                        primary_color:
                          type: string
                          description: Primary color code
                          example: "#ff69b4"
                        secondary_color:
                          type: string
                          description: Secondary color code
                          example: "#ffd700"
                    fonts:
                      type: object
                      description: Website font settings
                      required:
                        - primary_font
                      properties:
                        primary_font:
                          type: string
                          description: Primary font family
                          example: "Montserrat"
                    pages_meta:
                      type: array
                      description: List of pages with sections and metadata
                      items:
                        type: object
                        properties:
                          description:
                            type: string
                            description: Detailed description of the page purpose
                          sections:
                            type: array
                            description: Sections within the page
                            items:
                              type: object
                              properties:
                                section_description:
                                  type: string
                                  description: Detailed description of the section content
                                section_title:
                                  type: string
                                  description: Title of the section
                          title:
                            type: string
                            description: Title of the page
                    website_description:
                      type: string
                      description: SEO description for the website
                      example: "Experience the best restaurant in town! My Restaurant offers a unique dining experience with delicious food and a welcoming atmosphere."
                    website_keyphrase:
                      type: string
                      description: Primary keyphrase for SEO
                      example: "best restaurant in city"
                    website_title:
                      type: string
                      description: Title of the website
                      example: "My Restaurant - Best in City"
                    website_type:
                      type: string
                      description: Type of website template
                      example: "basic"
      responses:
        '200':
          description: Website generated successfully from sitemap
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    description: Status message
                  status:
                    type: integer
                    description: HTTP status code
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        description: URL of the generated website
                example:
                  msg: "Success"
                  status: 200
                  data:
                    url: "https://subdomain.domain.com"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ai/generate_sitemap:
    post:
      summary: Generate outline, styles, and secondary pages from a given business description
      tags:
        - AI
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - domain_id
                - params
              properties:
                domain_id:
                  type: integer
                  description: The ID of the domain to generate the sitemap for
                  example: 1111
                params:
                  type: object
                  required:
                    - business_type
                    - business_name
                    - business_description
                  properties:
                    business_type:
                      type: string
                      description: Type of business
                      example: "agency"
                    business_name:
                      type: string
                      description: Name of the business
                      example: "Model agency"
                    business_description:
                      type: string
                      description: Short description of the business
                      example: "My model agency is a world wide fashion studio."
      responses:
        '200':
          description: Sitemap generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    description: Status message
                  status:
                    type: integer
                    description: HTTP status code
                  data:
                    type: object
                    properties:
                      business_description:
                        type: string
                        description: Description of the business
                      business_name:
                        type: string
                        description: Name of the business
                      business_type:
                        type: string
                        description: Type of business
                      colors:
                        type: object
                        description: Website color scheme
                        properties:
                          background_dark:
                            type: string
                            description: Color code for dark backgrounds
                          primary_color:
                            type: string
                            description: Primary color code
                          secondary_color:
                            type: string
                            description: Secondary color code
                      domain_id:
                        type: integer
                        description: Domain identifier
                      fonts:
                        type: object
                        description: Website font settings
                        properties:
                          primary_font:
                            type: string
                            description: Primary font family
                      pages_meta:
                        type: array
                        description: List of pages with sections and metadata
                        items:
                          type: object
                          properties:
                            description:
                              type: string
                              description: Detailed description of the page purpose
                            sections:
                              type: array
                              description: Sections within the page
                              items:
                                type: object
                                properties:
                                  section_description:
                                    type: string
                                    description: Detailed description of the section content
                                  section_title:
                                    type: string
                                    description: Title of the section
                            title:
                              type: string
                              description: Title of the page
                      unique_id:
                        type: string
                        description: Unique identifier for the generated sitemap
                      website_description:
                        type: string
                        description: SEO description for the website
                      website_keyphrase:
                        type: string
                        description: Primary keyphrase for SEO
                      website_title:
                        type: string
                        description: Title of the website
                      website_type:
                        type: string
                        description: Type of website template
                example:
                  msg: "Success"
                  status: 200
                  data:
                    business_description: "Best restaurant in my city"
                    business_name: "My Restaurant"
                    business_type: "agency"
                    colors:
                      background_dark: "#212121"
                      primary_color: "#ff69b4"
                      secondary_color: "#ffd700"
                    domain_id: 18925
                    fonts:
                      primary_font: "Montserrat"
                    pages_meta:
                      - description: "The home page is the primary landing page for the website, providing a general overview of the restaurant."
                        sections:
                          - section_description: "Header section contains the logo, navigation menu, and site title."
                            section_title: "Header"
                          - section_description: "Hero section features a captivating image of the restaurant's interior or a delicious dish, along with a brief welcome message."
                            section_title: "Hero"
                        title: "Home"
                      - description: "The 'About Us' page provides a detailed description of the restaurant's background, mission, and values."
                        sections:
                          - section_description: "Our Story section contains a detailed description of the restaurant's history, mission, and values."
                            section_title: "Our Story"
                        title: "About Us"
                    unique_id: "ai2_unique_F405Pjih23f88mALR9DxPb1TQ0bld6g8M3uJ_JCH"
                    website_description: "Experience the best restaurant in town! My Restaurant offers a unique dining experience with delicious food and a welcoming atmosphere."
                    website_keyphrase: "best restaurant in city"
                    website_title: "My Restaurant - Best in City"
                    website_type: "basic"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/domains/{domain_id}/user_info:
    get:
      summary: Get user info for a domain
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: User info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/instance-info:
    get:
      summary: Get instance info for a domain
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Instance info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceInfoResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/staging/enable:
    post:
      summary: Enable staging for a domain
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Staging enabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{staging_domain_id}/staging/disable:
    post:
      summary: Disable staging for a domain
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/StagingDomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Staging disabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{staging_domain_id}/push-to-live:
    post:
      summary: Push changes to live environment
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/StagingDomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Migration completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/push-to-staging:
    post:
      summary: Push changes to staging environment
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Changes pushed to staging successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/zone:
    get:
      summary: Get zones
      tags:
        - Zone
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: List of zones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneListResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/zone/available:
    get:
      summary: Get all available zones
      tags:
        - Zone
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: List of available zones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableZonesResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/backup/list:
    get:
      summary: List backups for a domain
      tags:
        - Backup
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: List of backups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupListResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/backup/run:
    post:
      summary: Run a backup for a domain
      tags:
        - Backup
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Backup started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/backup/{backup_id}/restore:
    post:
      summary: Restore a backup
      tags:
        - Backup
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/BackupId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Backup restored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/domain-name:
    get:
      summary: Get domain names
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: List of domain names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainNameListResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add a domain name
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDomainNameRequest'
      responses:
        '200':
          description: Domain name added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDomainNameResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/domain-name/{domain_name_id}/default:
    post:
      summary: Set default domain name
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/DomainNameId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Default domain name set successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDefaultDomainNameResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/domain-name/{domain_name_id}/delete:
    delete:
      summary: Delete a domain name
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/DomainNameId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Domain name deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/certificate:
    get:
      summary: Get certificates for a domain
      tags:
        - Certificate
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: List of certificates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateListResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/certificate/custom:
    post:
      summary: Add custom certificate
      tags:
        - Certificate
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateCustomCertificateRequest'
      responses:
        '200':
          description: Custom certificate generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/certificate/free:
    post:
      summary: Generate free certificate
      tags:
        - Certificate
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateFreeCertificateRequest'
      responses:
        '200':
          description: Free certificate generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/certificate/remove:
    delete:
      summary: Remove certificates
      tags:
        - Certificate
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveCertificatesRequest'
      responses:
        '200':
          description: Certificates removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/domains/{domain_id}/cache/enable:
    put:
      summary: Enable FastCGI caching for a domain
      tags:
        - Cache
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                cache_time:
                  type: integer
                  description: Cache TTL in minutes (must be between 1 and 1500)
                  minimum: 1
                  maximum: 1500
                  example: 600
      responses:
        '200':
          description: Cache enabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/domains/{domain_id}/cache/disable:
    put:
      summary: Disable FastCGI caching for a domain
      tags:
        - Cache
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Cache disabled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/cache:
    delete:
      summary: Purge all cache for a domain
      tags:
        - Cache
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                recache:
                  type: integer
                  description: Whether to rebuild the cache (1) or just clear it (0)
                  enum: [0, 1]
      responses:
        '200':
          description: Cache purged successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/object-cache/toggle:
    post:
      summary: Toggle object cache for a domain
      tags:
        - Cache
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  description: Action to perform on object cache
                  enum: ["enable", "disable"]
                  example: "enable"
      responses:
        '200':
          description: Object cache setting updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/domains/{domain_id}/object-cache/flush:
    post:
      summary: Flush object cache for a domain
      tags:
        - Cache
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Object cache flushed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
  /hosting/domains/{domain_id}/logs:
    get:
      summary: Get logs for a domain
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum: [access, error, php]
          description: Type of log to retrieve
        - name: lines
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 20000
            default: 500
          description: Number of log lines to retrieve
      responses:
        '200':
          description: Domain logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, error]
                  logs:
                    type: string
                    description: Log content
                example:
                  status: "ok"
                  logs: "192.168.1.1 - - [10/Jun/2023:13:55:36 +0000] \"GET /wp-admin/ HTTP/1.1\" 200 2326 \"-\" \"Mozilla/5.0\"\n[10/Jun/2023:14:22:11 +0000] [error] 29#29: *1 FastCGI sent in stderr: \"PHP message: PHP Fatal error\""
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/domains/{domain_id}/password-protection:
    post:
      summary: Toggle password protection for a domain
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  description: Action to perform on password protection
                  enum: ["enable", "disable"]
                  example: "enable"
      responses:
        '200':
          description: Password protection toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
                  message:
                    type: string
                    description: Success message
                example:
                  status: "ok"
                  message: "successfully enabled"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/whitelist/ip:
    post:
      summary: Whitelist IP address for password-protected website
      description: Adds an IP address to the whitelist for a password-protected website, allowing access without password authentication
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ip
              properties:
                ip:
                  type: string
                  description: IP address to whitelist
                  example: "192.168.1.1"
      responses:
        '200':
          description: IP address successfully whitelisted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
                  message:
                    type: string
                    description: Success message
                example:
                  status: "ok"
                  message: "Successfully whitelisted"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/domains/{domain_id}/php-version/switch:
    post:
      summary: Switch PHP version for a domain
      tags:
        - PHP Management
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - php_version
              properties:
                php_version:
                  type: string
                  description: Target PHP version to switch to, valid versions need to be checked in the response of the /hosting/supported-php-versions endpoint
                  example: "8.2"
      responses:
        '200':
          description: PHP version switched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/domains/{domain_id}/php/restart:
    post:
      summary: Restart PHP for a domain
      tags:
        - PHP Management
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: PHP restarted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
                    
  /hosting/domains/{domain_id}/settings:
    get:
      summary: Get domain settings
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Domain settings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, error]
                  data:
                    type: object
                    properties:
                      cache_enabled:
                        type: boolean
                        description: Whether FastCGI cache is enabled
                      cache_time:
                        type: integer
                        description: Cache time in minutes
                      id:
                        type: integer
                        description: Domain ID
                      object_cache:
                        type: boolean
                        description: Whether object cache is enabled
                      php_version:
                        type: string
                        description: PHP version used by the domain
                      staging_enabled:
                        type: boolean
                        description: Whether staging environment is enabled
                      password_protection:
                        type: boolean
                        description: Whether password protection is enabled
                example:
                  status: "ok"
                  data:
                    cache_enabled: true
                    cache_time: 720
                    id: 781219
                    object_cache: true
                    php_version: "8.3"
                    staging_enabled: false
                    password_protection: false
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /hosting/domains/{domain_id}/storage:
    get:
      summary: Get storage information for a domain
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Storage information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, error]
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        description: Total storage used in bytes
                      database:
                        type: integer
                        description: Database storage used in bytes
                      files:
                        type: integer
                        description: Files storage used in bytes
                example:
                  status: "ok"
                  data:
                    total: 1073741824
                    database: 52428800
                    files: 1021313024
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/domains/{domain_id}/visitors:
    get:
      summary: Get visitor statistics for a domain
      tags:
        - Domain
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
        - name: period
          in: query
          required: false
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
          description: Time period for visitor statistics
      responses:
        '200':
          description: Visitor statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, error]
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                        description: Total number of visitors
                      unique:
                        type: integer
                        description: Unique visitors count
                      time_series:
                        type: array
                        items:
                          type: object
                          properties:
                            date:
                              type: string
                              format: date
                              description: Date in YYYY-MM-DD format
                            visitors:
                              type: integer
                              description: Number of visitors for that date
                example:
                  status: "ok"
                  data:
                    total: 15720
                    unique: 4867
                    time_series:
                      - date: "2023-06-01"
                        visitors: 532
                      - date: "2023-06-02"
                        visitors: 498
                      - date: "2023-06-03"
                        visitors: 612
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /account/domains/{domain_id}/single?admin_url={wp_admin_url}:
    get:
      summary: Generate single-use autologin token for website admin access
      description: |
        Generates a single-use token for secure, passwordless access to a website's WordPress admin panel.
        The token is valid for 5 minutes and can be used to automatically log in or create an admin user.
        
        The autologin feature allows for secure, tokenized access to WordPress admin panels without requiring manual credential entry. The system generates single-use tokens with a 5-minute TTL that can be used to:
        
        1. Log in automatically as an existing user if the email matches a WordPress user
        2. Create a new administrator account with the provided email and automatically log in
        
        ### Token Usage
        
        After obtaining a token, construct a URL in the following format:
        ```
        https://{website_url}/wp-admin/?twb_wp_login_token={token}&email={email}
        ```
        
        When a user visits this URL:
        - If a user with the provided email exists in WordPress, they will be automatically logged in
        - If no matching user exists, a new administrator account will be created with the email and automatic login occurs
        
        ### Security Notes
        
        - Tokens can only be used once
        - Tokens expire after 5 minutes
        - This provides a secure method for resellers to give customers access to their WordPress admin panels
      tags:
        - WP Autologin
      parameters:
        - $ref: '#/components/parameters/DomainId'
        - $ref: '#/components/parameters/Authorization'
        - name: admin_url
          in: query
          required: true
          schema:
            type: string
          description: URL of the WordPress admin panel
          example: "https://mywebsite.example.com/wp-admin"
      responses:
        '200':
          description: Autologin token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, error]
                  token:
                    type: string
                    description: Single-use token for website admin autologin
                example:
                  status: "ok"
                  token: "FFX0jjafItN3SNbAyEkQf6rJUvLcM6HiEVJotjGnaxgita3C7cJIWCvESBtSsfqXhJL7HyUP9B3xQXQHkrr6HhY3HfcHAgiiVskxUAjfiiQRoNXaOZ7jTnnNMS"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/domains/subdomain/check:
    post:
      summary: Check if a subdomain is available
      tags:
        - Subdomain
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - subdomain
              properties:
                subdomain:
                  type: string
                  description: The subdomain to check for availability (max 63 chars)
                  example: "my-website"
      responses:
        '200':
          description: Subdomain availability check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, error]
                  message:
                    type: string
                    description: Status message about the subdomain
                example:
                  status: "ok"
                  message: "Subdomain is free"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/domains/subdomain/generate:
    post:
      summary: Generate a random available subdomain
      tags:
        - Subdomain
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: Generated subdomain result
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, error]
                  subdomain:
                    type: string
                    description: The generated subdomain
                example:
                  status: "ok"
                  subdomain: "summary-starfish"
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/supported-php-versions:
    get:
      summary: Get supported PHP versions
      tags:
        - PHP Management
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: List of supported PHP versions
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, error]
                  data:
                    type: array
                    items:
                      type: string
                      description: PHP version string
                example:
                  status: "ok"
                  data: ["7.4", "8.0", "8.1", "8.2", "8.3", "8.4"]
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/zone/{zone_id}/records:
    get:
      summary: Get all DNS records for a zone
      tags:
        - Zone
      parameters:
        - $ref: '#/components/parameters/ZoneId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '200':
          description: List of DNS records for the zone
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, error]
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Record'
                example:
                  status: "ok"
                  data:
                    - id: 12345
                      name: "example.com"
                      value: "192.168.1.1"
                      type: "A"
                      ttl: 300
                      priority: null
                      port: null
                      weight: null
                    - id: 12346
                      name: "mail.example.com"
                      value: "mail.example.com.herokudns.com"
                      type: "CNAME"
                      ttl: 3600
                      priority: null
                      port: null
                      weight: null
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
  /hosting/zone/{zone_id}/records/create:
    post:
      summary: Create a new DNS record for a zone
      tags:
        - Zone
      parameters:
        - $ref: '#/components/parameters/ZoneId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecordRequest'
      responses:
        '201':
          description: DNS record created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
                example:
                  status: "ok"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/zone/{zone_id}/records/{record_id}/update:
    patch:
      summary: Update an existing DNS record
      tags:
        - Zone
      parameters:
        - $ref: '#/components/parameters/ZoneId'
        - $ref: '#/components/parameters/RecordId'
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRecordRequest'
      responses:
        '201':
          description: DNS record updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
                example:
                  status: "ok"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
  /hosting/zone/{zone_id}/records/{record_id}:
    post:
      summary: Delete a DNS record
      tags:
        - Zone
      parameters:
        - $ref: '#/components/parameters/ZoneId'
        - $ref: '#/components/parameters/RecordId'
        - $ref: '#/components/parameters/Authorization'
      responses:
        '201':
          description: DNS record deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
                example:
                  status: "ok"
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    DomainId:
      name: domain_id
      in: path
      required: true
      schema:
        type: integer
    StagingDomainId:
      name: staging_domain_id
      in: path
      required: true
      schema:
        type: integer
    BackupId:
      name: backup_id
      in: path
      required: true
      schema:
        type: integer
    DomainNameId:
      name: domain_name_id
      in: path
      required: true
      schema:
        type: integer
    ZoneId:
      name: zone_id
      in: path
      required: true
      schema:
        type: integer
    RecordId:
      name: record_id
      in: path
      required: true
      schema:
        type: integer
    Authorization:
      name: x-api-key
      in: header
      required: true
      schema:
        type: string
      description: API key for authentication
      example: "API_KEY"

  schemas:
    CreateWebsiteRequest:
      type: object
      required:
        - subdomain
        - region
        - site_title
        - admin_username
        - admin_password
      properties:
        subdomain:
          type: string
          description: Subdomain for the website (3-63 characters, lowercase letters, numbers, and hyphens only)
        region:
          type: string
          description: Region of the website
        site_title:
          type: string
          description: Title of the website
        admin_username:
          type: string
          description: Admin username for the website (max 60 characters, can contain alphanumeric characters, space, _, ., -, *, @)
        admin_password:
          type: string
          description: Admin password for the website (must contain 1 lowercase, 1 uppercase, 1 digit, minimum 8 chars)

    WebsiteResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        data:
          type: object
          properties:
            domain_id:
              type: integer
              description: The ID of the created domain
      example:
        status: "ok"
        data:
          domain_id: 15604

    Zone:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          type: string

    UserInfo:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string

    InstanceInfo:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          type: string
        ip_address:
          type: string

    Backup:
      type: object
      properties:
        id:
          type: integer
        created_at:
          type: string
          format: date-time
        status:
          type: string
        size:
          type: integer

    DomainName:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        is_default:
          type: boolean

    AddDomainNameRequest:
      type: object
      required:
        - domain_name
      properties:
        domain_name:
          type: string
          description: Domain name to add (valid domain name format)

    ZoneListResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        data:
          type: array
          items:
            $ref: '#/components/schemas/ZoneItem'
      example:
        status: "ok"
        data:
          - id: 1905
            name: "test.com"
            nameservers: '["NS1", "NS2", "NS3", "NS4"]'
          - id: 1906
            name: "test1.com"
            nameservers: '["NS1", "NS2", "NS3", "NS4"]'

    ZoneItem:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the zone
        name:
          type: string
          description: The name of the zone
        nameservers:
          type: string
          description: JSON string containing an array of nameserver addresses

    AvailableZonesResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        data:
          type: array
          items:
            $ref: '#/components/schemas/AvailableZone'
      example:
        status: "ok"
        data:
          - is_available: 1
            location: "Council Bluffs, Iowa, USA"
            region: "us-central1"
            zone: "us-central1-c"
          - is_available: 1
            location: "The Dalles, Oregon, USA"
            region: "us-west1"
            zone: "us-west1-a"
          - is_available: 1
            location: "Moncks Corner, South Carolina, USA"
            region: "us-east1"
            zone: "us-east1-b"
          # ... (other zones as per the example)

    AvailableZone:
      type: object
      properties:
        is_available:
          type: integer
          enum: [0, 1]
          description: Indicates if the zone is available (1) or not (0)
        location:
          type: string
          description: Full name of the region
        region:
          type: string
          description: The region identifier
        zone:
          type: string
          description: The specific zone identifier

    UserInfoResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        data:
          type: object
          properties:
            mysql:
              type: object
              properties:
                db_name:
                  type: string
                  description: Database name
                password:
                  type: string
                  description: Database password
                path:
                  type: string
                  description: PHP admin URL
                type:
                  type: string
                  enum: [mysql]
                username:
                  type: string
                  description: Database username
            sftp:
              type: object
              properties:
                password:
                  type: string
                  description: SFTP password
                port:
                  type: integer
                  description: SFTP port number
                type:
                  type: string
                  enum: [sftp]
                username:
                  type: string
                  description: SFTP username
      example:
        status: "ok"
        data:
          mysql:
            db_name: "DB_NAME"
            password: "DB_PASSWORD"
            path: "PHP_ADMIN_URL"
            type: "mysql"
            username: "USERNAME"
          sftp:
            password: "SFTP_PASS"
            port: 22
            type: "sftp"
            username: "SFTP_USERNAME"

    InstanceInfoResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        data:
          type: object
          properties:
            ip:
              type: string
              description: IP address of the instance
            location:
              type: string
              description: Full name of the region
            region:
              type: string
              description: Region identifier of the instance
      example:
        status: "ok"
        data:
          ip: "34.172.74.94"
          location: "Council Bluffs, Iowa, USA"
          region: "us-central1-c"

    StatusResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
      example:
        status: "ok"

    BackupListResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        data:
          type: array
          items:
            $ref: '#/components/schemas/BackupItem'
      example:
        status: "ok"
        data:
          - backup_id: 25340
            backup_size: 272243447
            backup_time: "20240924T052401Z"
            created_at: "Tue, 24 Sep 2024 05:24:42 GMT"
            type: "SCHEDULED"
          - backup_id: 25553
            backup_size: 272243447
            backup_time: "20240925T052402Z"
            created_at: "Wed, 25 Sep 2024 05:24:09 GMT"
            type: "MANUAL"
          # ... (more backup items)

    BackupItem:
      type: object
      properties:
        backup_id:
          type: integer
          description: Unique identifier for the backup
        backup_size:
          type: integer
          description: Size of the backup in bytes
        backup_time:
          type: string
          description: Time when the backup was created (in format YYYYMMDDTHHmmssZ)
        created_at:
          type: string
          format: date-time
          description: Human-readable creation time of the backup
        type:
          type: string
          description: Type of the backup (e.g., SCHEDULED, MANUAL)

    AddDomainNameResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        data:
          type: object
          properties:
            domain_name:
              type: string
              description: The added domain name
            id:
              type: integer
              description: The ID of the added domain name
            message:
              type: string
              description: A success message
            nameservers:
              type: string
              description: JSON string containing an array of nameserver addresses
            status:
              type: string
              enum: [ok, error]
              description: Status of the operation
      example:
        status: "ok"
        data:
          domain_name: "https://testdomain.com"
          id: 16461
          message: "Domain name successfully saved"
          nameservers: '["NS1", "NS2", "NS3", "NS4"]'
          status: "ok"

    DomainNameListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/DomainNameItem'
      example:
        data:
          - admin_url: "https://regular-herring.10web.club/wp-admin"
            created_at: "2024-09-23 07:08:47"
            default: 1
            domain_id: 15354
            id: 16194
            name: "regular-herring.10web.club"
            scheme: "https"
            site_url: "https://regular-herring.10web.club"
            updated_at: "2024-09-23 07:08:47"
          - admin_url: "https://testdomain.com/wp-admin/"
            created_at: "2024-10-10 11:17:04"
            default: 0
            domain_id: 15354
            id: 16461
            name: "testdomain.com"
            scheme: "http"
            site_url: "https://testdomain.com"
            updated_at: "2024-10-10 11:17:04"

    DomainNameItem:
      type: object
      properties:
        admin_url:
          type: string
          description: URL for the admin panel
        created_at:
          type: string
          format: date-time
          description: Creation date and time
        default:
          type: integer
          enum: [0, 1]
          description: Whether this is the default domain (1) or not (0)
        domain_id:
          type: integer
          description: ID of the domain to which the domain name belongs
        id:
          type: integer
          description: Unique identifier for the domain name
        name:
          type: string
          description: The domain name
        scheme:
          type: string
          enum: [http, https]
          description: The URL scheme used
        site_url:
          type: string
          description: Full URL of the site
        updated_at:
          type: string
          format: date-time
          description: Last update date and time

    SetDefaultDomainNameResponse:
      type: object
      properties:
        domain_name:
          type: string
          description: The domain name set as default
        message:
          type: string
          description: A success message
        status:
          type: string
          enum: [ok, error]
          description: Status of the operation
      example:
        domain_name: "https://testdomain.com"
        message: "Domain name successfully set as default"
        status: "ok"

    CertificateListResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        data:
          type: array
          items:
            $ref: '#/components/schemas/Certificate'

    Certificate:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the certificate
        common_name:
          type: string
          description: The common name of the certificate
        domain_name:
          type: string
          description: The domain name for which the certificate is issued
        issuer:
          type: string
          description: The issuer of the certificate
        status:
            type: string
            description: The status of the certificate
        type:
            type: string
            enum: [custom, free]
        valid_from:
          type: string
          format: date-time
        valid_to:
          type: string
          format: date-time

    GenerateCustomCertificateRequest:
      type: object
      required:
        - key_file_content
        - cert_file_content
      properties:
        key_file_content:
          type: string
          description: The content of the key file
        cert_file_content:
          type: string
          description: The content of the certificate file, recommended to append the ca file content after it
        ca_file_content:
          type: string
          description: The content of the ca file
        redirect_http:
          type: integer
          enum: [ 0, 1 ]
          description: Redirect HTTP to HTTPS

    GenerateFreeCertificateRequest:
      type: object
      required:
        - domain_name_ids
      properties:
        domain_name_ids:
          type: array
          description: The IDs of the domain names for which to generate the certificate
          items:
            type: integer
        redirect_http:
            type: integer
            enum: [0, 1]

    RemoveCertificatesRequest:
      type: object
      required:
        - domain_name_ids
      properties:
        domain_name_ids:
          type: array
          description: The IDs of the domain names for which to remove the certificates
          items:
            type: integer

    CertificateResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ok, error]
        message:
          type: string
        data:
          $ref: '#/components/schemas/Certificate'

    AccountDomainsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AccountDomain'

    AccountDomain:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        site_url:
          type: string
        admin_url:
          type: string
        site_title:
          type: string
        domain_hash:
          type: string
        type:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
          
      example:
        id: 15354
        name: "testdomain.com"
        site_url: "https://testdomain.com"
        admin_url: "https://testdomain.com/wp-admin/"
        site_title: "My Website"
        domain_hash: "DOMAIN_HASH_STRING"
        type: "live"
        created_at: "2024-09-23 07:08:47"
        updated_at: "2024-10-10 11:22:25"

    Score:
      type: object
      properties:
        desktop_score:
          type: integer
        mobile_score:
          type: integer
        desktop_tti:
          type: number
        mobile_tti:
          type: number
        date:
          type: string
        tool:
          type: string
          
    Record:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the record
        name:
          type: string
          description: The name of the record (FQDN)
        value:
          type: string
          description: The value of the record
        type:
          type: string
          description: The type of the record (A, AAAA, CNAME, MX, etc.)
          enum: [SOA, A, TXT, NS, CNAME, MX, NAPTR, PTR, SRV, SPF, AAAA, CAA]
        ttl:
          type: integer
          description: Time-to-live in seconds
        priority:
          type: integer
          description: Priority field (used for MX and SRV records)
          nullable: true
        port:
          type: integer
          description: Port field (used for SRV records)
          nullable: true
        weight:
          type: integer
          description: Weight field (used for SRV records)
          nullable: true
          
    CreateRecordRequest:
      type: object
      required:
        - type
        - ttl
        - value
      properties:
        name:
          type: string
          description: Record name (without zone name, will be appended automatically)
        type:
          type: string
          description: The type of the record
          enum: [SOA, A, TXT, NS, CNAME, MX, NAPTR, PTR, SRV, SPF, AAAA, CAA]
        ttl:
          type: integer
          description: Time-to-live in seconds
        value:
          type: string
          description: The value of the record
        priority:
          type: integer
          description: Priority field (required for MX and SRV records)
        port:
          type: integer
          description: Port field (required for SRV records)
        weight:
          type: integer
          description: Weight field (required for SRV records)
      example:
        name: "www"
        type: "A"
        ttl: 300
        value: "192.168.1.1"
        
    UpdateRecordRequest:
      type: object
      required:
        - name
        - ttl
        - value
        - type
      properties:
        name:
          type: string
          description: Record name without domain (e.g. for record.example.com the name is record)
        ttl:
          type: integer
          description: Time-to-live in seconds
        value:
          type: string
          description: The value of the record
        type:
          type: string
          description: The type of the record
          enum: [A, TXT, CNAME, MX, PTR, SRV, SPF, AAAA]
        priority:
          type: integer
          description: Priority field (optional)
        port:
          type: integer
          description: Port field (optional)
        weight:
          type: integer
          description: Weight field (optional)
      example:
        name: "record"
        ttl: 3600
        value: "192.168.1.2"
        type: "A"
        
  responses:
    Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: [error]
              message:
                type: string
                example: "Unauthorized access"

    InternalServerError:
      description: Something went wrong
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: [error]
              message:
                type: string
                example: "Something went wrong"

    TooManyRequests:
      description: Too many requests
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: [error]
              message:
                type: string
                example: "Too many requests. Please try again later."

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: [error]
              message:
                type: string
                example: "Invalid request parameters"